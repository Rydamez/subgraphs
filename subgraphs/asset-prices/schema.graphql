#################################################
# Assets & asset prices
#################################################

"""
A registered asset.
"""
type Asset @entity {
  id: ID!
  """
  The name of this asset.
  """
  name: String!
  """
  The symbol of this asset.
  """
  symbol: String!
  """
  The number of decimal places for this asset.
  """
  decimals: Int!
  """
  The release versions in which this asset is supported.
  """
  versions: [Int!]!
  """
  The timestamp at which the asset price was updated.
  """
  updated: BigInt!
  """
  The asset price in ETH.
  """
  price: BigDecimal!
  """
  A list of active registrations for this asset. Used to run batched updates for derivative assets.
  """
  registrations: [AssetRegistration!]!
}

#################################################
# Currencies & currency values
#################################################

"""
The supported currencies are USD, BTC, EUR, CHF, GBP, AUD and JPY.
"""
type Currency @entity {
  id: ID!
  """
  The timestamp at which the currency value was updated.
  """
  updated: BigInt!
  """
  The currency value represented in ETH.
  """
  eth: BigDecimal!
  """
  The currency value represented in USD.
  """
  usd: BigDecimal!
}

#################################################
# Chainlink aggregators & proxies
#################################################

"""
Chainlink aggregator proxy.
"""
type AggregatorProxy @entity {
  id: ID!
  """
  The assets currently controlled by this aggregator proxy.
  """
  registrations: [Registration!]!
}

"""
Chainlink aggregator.
"""
type Aggregator @entity {
  id: ID!
  """
  The number of decimal places.
  """
  decimals: Int!
  """
  The chainlink aggregator proxies currently pointing at this aggregator.
  """
  proxies: [AggregatorProxy!]!
  """
  The last time the proxies were checked for updates.
  """
  updated: BigInt!
}

#################################################
# Asset registrations
#################################################

enum RegistrationType {
  CURRENCY
  PRIMITIVE
  DERIVATIVE
}

enum RateAsset {
  ETH
  USD
}

interface Registration {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
}

interface AssetRegistration {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered asset.
  """
  asset: Asset!
  """
  Used for sorting the registrations before invoking updates on their behalf.
  """
  version: Int!
}

type CurrencyRegistration implements Registration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered currency.
  """
  currency: Currency!
  """
  The registered aggregator proxy.
  """
  proxy: AggregatorProxy!
}

type PrimitiveRegistration implements Registration & AssetRegistration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The quote asset (ETH or USD).
  """
  quote: RateAsset!
  """
  The registered asset.
  """
  asset: Asset!
  """
  The registered aggregator proxy.
  """
  proxy: AggregatorProxy!
  """
  Used for sorting the registrations before invoking updates on their behalf.
  """
  version: Int!
}

type DerivativeRegistration implements Registration & AssetRegistration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered asset.
  """
  asset: Asset!
  """
  Used for sorting the registrations before invoking updates on their behalf.
  """
  version: Int!
}

#################################################
# Registry & updater state
#################################################

"""
Registry for storing usd quoted primitives that need to be updated as a side-effect whenever the usd currency
is updated.
"""
type UsdQuotedPrimitiveRegistry @entity {
  id: ID!
  """
  The list of usd quoted primitives for which to perform updates as a side-effect whenever the usd price is updated.
  """
  assets: [Asset!]!
}

"""
Registry for storing derivatives that need to be updated as a side-effect of primitive asset price updates as
they do not have their own dedicated data source & events.
"""
type DerivativeRegistry @entity {
  id: ID!
  """
  The list of derivatives for which to perform updates as a side-effect of the observed aggregator updates.
  """
  assets: [Asset!]!
}

"""
Storing these in a separate entity instead
of in the Updater entity should help with performance as the list of derivatives can become quite large and
the Updater entity needs to be updated quite frequently.
"""
type DerivativeUpdater @entity {
  id: ID!
  """
  The progress within the current round. Once the progress exceeds the derivative count a new round is started.
  """
  progress: Int!
  """
  The block number at which we ran the last derivative update.
  """
  block: BigInt!
}
