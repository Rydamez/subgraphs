#################################################
# Assets & asset prices
#################################################

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  price: AssetPrice!
  prices: [AssetPrice!]! @derivedFrom(field: "asset")
  """A list of active registrations for this asset. Used to run batched updates for derivative assets."""
  registrations: [AssetRegistration!]!
}

type AssetPrice @entity {
  id: ID!
  """Unique incremental identifier for sorting & scraping data with exactly-once guarantees."""
  incremental: String!
  """The asset this price belongs to."""
  asset: Asset!
  """The block number at which the price was updated."""
  block: BigInt!
  """The timestamp at which the price was updated."""
  timestamp: BigInt!
  """The asset price in ETH."""
  price: BigDecimal!
}

#################################################
# Currencies & currency values
#################################################

type Currency @entity {
  id: ID!
  value: CurrencyValue!
  values: [CurrencyValue!]! @derivedFrom(field: "currency")
}

type CurrencyValue @entity {
  id: ID!
  """Unique incremental identifier for sorting & scraping data with exactly-once guarantees."""
  incremental: String!
  """The currency key."""
  currency: Currency!
  """The block number at which the currency value was updated."""
  block: BigInt!
  """The timestamp at which the currency value was updated."""
  timestamp: BigInt!
  """The currency value represented in ETH."""
  eth: BigDecimal!
  """The currency value represented in USD."""
  usd: BigDecimal!
}

#################################################
# Chainlink aggregators & proxies
#################################################

enum AggregatorType {
  ETH
  USD
}

type AggregatorProxy @entity {
  id: ID!
  """The assets currently controlled by this aggregator proxy."""
  registrations: [Registration!]!
}

type Aggregator @entity {
  id: ID!
  """The type of the aggregator (USD [8 decimals] or ETH [18 decimals])."""
  type: AggregatorType!
  """The chainlink aggregator proxies currently pointing at this aggregator."""
  proxies: [AggregatorProxy!]!
  """The last time the proxies were checked for updates."""
  updated: BigInt!
}

#################################################
# Asset registrations
#################################################

enum RegistrationType {
  CURRENCY
  PRIMITIVE
  DERIVATIVE
}

interface Registration {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

interface AssetRegistration {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """The registered asset."""
  asset: Asset!
  """The value interpreter contract address."""
  interpreter: String!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

interface AggregatorRegistration {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """The registered aggregator proxy."""
  proxy: AggregatorProxy!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

type CurrencyRegistration implements Registration & AggregatorRegistration @entity {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """The registered currency."""
  currency: Currency!
  """The registered aggregator proxy."""
  proxy: AggregatorProxy!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

type PrimitiveRegistration implements Registration & AssetRegistration & AggregatorRegistration @entity {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """The contract that registered the aggregator."""
  issuer: String!
  """The registered asset."""
  asset: Asset!
  """The registered aggregator proxy."""
  proxy: AggregatorProxy!
  """The value interpreter contract address."""
  interpreter: String!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

type DerivativeRegistration implements Registration & AssetRegistration @entity {
  id: ID!
  """The type of the registration entry."""
  type: RegistrationType!
  """The contract that registered the aggregator."""
  issuer: String!
  """The registered asset."""
  asset: Asset!
  """The value interpreter contract address."""
  interpreter: String!
  """Used for sorting the registrations before invoking updates on their behalf."""
  priority: Int!
}

#################################################
# Updater state
#################################################

"""
Seperate registry for storing derivatives that need to be updated as a side-effect of primitive asset price
updates as they do not have their own dedicated data source & events. Storing these in a separate entity instead
of in the Updater entity should help with performance as the list of derivatives can become quite large and
the Updater entity needs to be updated quite frequently.
"""
type Registry @entity {
  id: ID!
  """The list of derivatives for which to perform updates as a side-effect of the observed aggregator updates."""
  derivatives: [Asset!]!
}

type Updater @entity {
  id: ID!
  """The progress within the current round. Once the progress exceeds the derivative count a new round is started."""
  progress: Int!
  """The block number at which we ran the last derivative update."""
  block: BigInt!
}
