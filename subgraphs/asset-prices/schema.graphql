#################################################
# Assets & asset prices
#################################################

"""
A registered asset.
"""
type Asset @entity {
  id: ID!
  """
  The number of decimal places for this asset.
  """
  decimals: Int!
  """
  The asset price in ETH.
  """
  price: BigDecimal!
  """
  The timestamp at which the asset price was updated.
  """
  updated: Int!
  """
  A list of active registrations for this asset. Used to run batched updates for derivative assets.
  """
  registrations: [AssetRegistration!]!
}

"""
A historical asset price.
"""
type AssetPrice @entity {
  id: ID!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
  """
  The timestamp at which the asset price was updated.
  """
  timestamp: Int!
  """
  The asset this price record belongs to.
  """
  asset: Asset!
  """
  The asset price in ETH.
  """
  price: BigDecimal!
}

#################################################
# Currencies & currency values
#################################################

"""
The supported currencies are USD, BTC, EUR, CHF, GBP, AUD and JPY.
"""
type Currency @entity {
  id: ID!
  """
  The currency value represented in ETH.
  """
  eth: BigDecimal!
  """
  The currency value represented in USD.
  """
  usd: BigDecimal!
  """
  The timestamp at which the currency value was updated.
  """
  updated: Int!
}

#################################################
# Chainlink aggregators & proxies
#################################################

"""
Chainlink aggregator proxy.
"""
type AggregatorProxy @entity {
  id: ID!
  """
  The assets currently controlled by this aggregator proxy.
  """
  registrations: [Registration!]!
}

"""
Chainlink aggregator.
"""
type Aggregator @entity {
  id: ID!
  """
  The number of decimal places.
  """
  decimals: Int!
  """
  The latest answer.
  """
  answer: BigInt!
  """
  The timestamp of the latest answer.
  """
  timestamp: Int!
  """
  The chainlink aggregator proxies currently pointing at this aggregator.
  """
  proxies: [AggregatorProxy!]!
  """
  The timestamp at which the associated proxies were last checked for changes (to detect whether a proxy has been pointed at a different aggregator).
  """
  updated: Int!
}

#################################################
# Asset registrations
#################################################

enum RegistrationType {
  CURRENCY
  PRIMITIVE
  DERIVATIVE
}

enum RateAsset {
  ETH
  USD
}

interface Registration {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  Any change events related to this registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

interface AssetRegistration {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered asset.
  """
  asset: Asset!
  """
  The version (address of FundDeployer) in which the asset was registered.
  """
  version: Bytes!
  """
  Any change events related to this registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

type CurrencyRegistration implements Registration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered currency.
  """
  currency: Currency!
  """
  The registered aggregator proxy.
  """
  proxy: AggregatorProxy!
  """
  Any change events related to this registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

type PrimitiveRegistration implements Registration & AssetRegistration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The quote asset (ETH or USD).
  """
  quote: RateAsset!
  """
  The registered asset.
  """
  asset: Asset!
  """
  The registered aggregator proxy.
  """
  proxy: AggregatorProxy!
  """
  The version (address of FundDeployer) in which the asset was registered.
  """
  version: Bytes!
  """
  Any change events related to this registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

type DerivativeRegistration implements Registration & AssetRegistration @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The registered asset.
  """
  asset: Asset!
  """
  The version (address of FundDeployer) in which the asset was registered.
  """
  version: Bytes!
  """
  Any change events related to this registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

enum RegistrationChangeType {
  ADDED
  REMOVED
}

type RegistrationChange @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The type of the change.
  """
  change: RegistrationChangeType!
  """
  The timestamp when the change occurred.
  """
  timestamp: Int!
  """
  The block number in which the change occurred.
  """
  block: BigInt!
  """
  The transaction which caused the change.
  """
  transaction: Bytes!
  """
  The affected registration.
  """
  registration: Registration!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
}

#################################################
# Registry & updater state
#################################################

"""
Registry for storing usd quoted primitives that need to be updated as a side-effect whenever the usd currency
is updated.
"""
type UsdQuotedPrimitiveRegistry @entity {
  id: ID!
  """
  The list of usd quoted primitives for which to perform updates as a side-effect whenever the usd price is updated.
  """
  assets: [Asset!]!
}

"""
Registry for storing derivatives that need to be updated as a side-effect of primitive asset price updates as
they do not have their own dedicated data source & events.
"""
type DerivativeRegistry @entity {
  id: ID!
  """
  The list of derivatives for which to perform updates as a side-effect of the observed aggregator updates.
  """
  assets: [Asset!]!
}

"""
Storing these in a separate entity instead
of in the Updater entity should help with performance as the list of derivatives can become quite large and
the Updater entity needs to be updated quite frequently.
"""
type DerivativeUpdater @entity {
  id: ID!
  """
  The progress within the current round. Once the progress exceeds the derivative count a new round is started.
  """
  progress: Int!
  """
  The block number at which we ran the last derivative update.
  """
  block: Int!
}

#################################################
# Counter
#################################################

"""
Generic counter entity to allow safe data scraping.
"""
type Counter @entity {
  id: ID!
  """
  Strictly incremental counter for data scraping.
  """
  count: Int!
}
