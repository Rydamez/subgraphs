#################################################
# Version
#################################################

"""
A release version.
"""
type Version @entity {
  id: ID!
  assets: [Asset!]! @derivedFrom(field: "version")
  changes: [RegistrationChange!]! @derivedFrom(field: "version")
  registrations: [Registration!]! @derivedFrom(field: "version")
}

#################################################
# Assets
#################################################

"""
A registered asset.
"""
type Asset @entity {
  id: ID!
  """
  The address of the asset.
  """
  address: Bytes!
  """
  The symbol of the asset.
  """
  symbol: String!
  """
  The name of the asset.
  """
  name: String!
  """
  The number of decimal places for this asset.
  """
  decimals: Int!
  """
  The version in which the asset was registered.
  """
  version: Version!
  """
  All registrations for this asset.
  """
  registrations: [Registration!]!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
  """
  A list of registration changes for this asset.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "asset")
}

#################################################
# Asset registrations
#################################################

enum RegistrationType {
  PRIMITIVE
  DERIVATIVE
}

type Registration @entity {
  id: ID!
  """
  The asset.
  """
  asset: Asset!
  """
  The version in which the asset was registered.
  """
  version: Version!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
  """
  Flag if registration is currently active.
  """
  active: Boolean!
  """
  Last known registration details.
  """
  details: RegistrationDetails!
  """
  All changes related to the registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

#################################################
# Asset registrations details
#################################################

interface RegistrationDetails {
  id: ID!
}

type PrimitiveRegistrationDetails implements RegistrationDetails @entity {
  id: ID!
  """
  The chainlink aggregator address for the asset registration.
  """
  aggregator: Bytes!
}

# TODO: Add derived metadata about the asset (e.g. uniswap pool details)
type DerivativeRegistrationDetails implements RegistrationDetails @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
}

#################################################
# Asset registration changes
#################################################

enum RegistrationChangeType {
  ADDED
  REMOVED
}

type RegistrationChange @entity {
  id: ID!
  """
  The type of the registration entry.
  """
  type: RegistrationType!
  """
  The type of the change.
  """
  change: RegistrationChangeType!
  """
  The version in which the asset was registered.
  """
  version: Version!
  """
  The affected asset.
  """
  asset: Asset!
  """
  The affected registration.
  """
  registration: Registration!
  """
  The registration details in effect when this change occurred.
  """
  details: RegistrationDetails!
  """
  The timestamp when the change occurred.
  """
  timestamp: Int!
  """
  The block number in which the change occurred.
  """
  block: BigInt!
  """
  The transaction which caused the change.
  """
  transaction: Bytes!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
}

#################################################
# Counter
#################################################

"""
Generic counter entity to allow safe data scraping.
"""
type Counter @entity {
  id: ID!
  """
  Strictly incremental counter for data scraping.
  """
  count: Int!
}
