#################################################
# Version
#################################################

"""
A release version.
"""
type Version @entity {
  id: ID!
  counter: Int!
  changes: [RegistrationChange!]! @derivedFrom(field: "version")
  registrations: [Registration!]! @derivedFrom(field: "version")
}

#################################################
# Assets
#################################################

"""
A registered asset.
"""
type Asset @entity {
  id: ID!
  """
  The symbol of the asset.
  """
  symbol: String!
  """
  The name of the asset.
  """
  name: String!
  """
  The number of decimal places for this asset.
  """
  decimals: Int!
  """
  All registrations for this asset.
  """
  registrations: [Registration!]!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
  """
  A list of registration changes for this asset.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "asset")
}

#################################################
# Asset registrations
#################################################

type Registration @entity {
  id: ID!
  """
  The asset.
  """
  asset: Asset!
  """
  The version in which the asset was registered.
  """
  version: Version!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
  """
  Timestamp when the registration was added.
  """
  added: Int!
  """
  Timestamp when the registration was updated.
  """
  updated: Int!
  """
  Flag if registration is currently active.
  """
  active: Boolean!
  """
  Last known registration details.
  """
  detail: RegistrationDetail!
  """
  All changes related to the registration.
  """
  changes: [RegistrationChange!]! @derivedFrom(field: "registration")
}

#################################################
# Asset registrations details
#################################################

interface RegistrationDetail {
  id: ID!
}

type PrimitiveRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The chainlink aggregator address for the asset registration.
  """
  aggregator: Bytes!
}

type AaveRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

type AlphaHomoraV1RegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

enum CurveAssetType {
  GAUGE
  POOL
}

type CurvePoolRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The description.
  """
  pool: Bytes!
  """
  The  address of the gauge.
  """
  gauge: Bytes!
  """
  The lp token asset.
  """
  lpToken: Asset!
  """
  The gauge token asset.
  """
  gaugeToken: Asset!
  """
  The Curve Pool asset type.
  """
  curveAssetType: CurveAssetType!
  """
  The invariantProxyAsset.
  """
  invariantProxyAsset: Asset!
  """
  The number of tokens.
  """
  numberOfTokens: Int!
  """
  The underlying tokens.
  """
  underlyingAssets: [Asset!]!
}

type CompoundRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

type IdleRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

type StakehoundEthRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

type SynthetixRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
}

type UniswapV2PoolRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying tokens.
  """
  underlyingAssets: [Asset!]!
}

type YearnVaultV2RegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
  """
  The underlying asset.
  """
  underlyingAsset: Asset!
}

type UnknownRegistrationDetail implements RegistrationDetail @entity {
  id: ID!
  """
  The derivative price feed address for the asset registration.
  """
  feed: Bytes!
}

#################################################
# Asset registration changes
#################################################

enum RegistrationChangeType {
  ADDED
  REMOVED
}

type RegistrationChange @entity {
  id: ID!
  """
  The type of the change.
  """
  change: RegistrationChangeType!
  """
  The version in which the asset was registered.
  """
  version: Version!
  """
  The affected asset.
  """
  asset: Asset!
  """
  The affected registration.
  """
  registration: Registration!
  """
  The registration details in effect when this change occurred.
  """
  detail: RegistrationDetail!
  """
  The timestamp when the change occurred.
  """
  timestamp: Int!
  """
  The block number in which the change occurred.
  """
  block: BigInt!
  """
  The transaction which caused the change.
  """
  transaction: Bytes!
  """
  Incremental counter to enable safe scraping.
  """
  counter: Int!
}

#################################################
# Counter
#################################################

"""
Generic counter entity to allow safe data scraping.
"""
type Counter @entity {
  id: ID!
  """
  Strictly incremental counter for data scraping.
  """
  count: Int!
}
