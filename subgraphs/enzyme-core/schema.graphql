#################################################
# Enums
#################################################

enum ComptrollerStatus {
  COMMITTED
  DESTRUCTED
  FREE
  SIGNALLED
}

enum SharesChangeType {
  SharesBought
  SharesRedeemed
  SharesTransferredIn
  SharesTransferredOut
  FeeSharesPaid
  FeeSharesReceived
  FeeSharesBurned
  FeeSharesAllocationChanged
  ProtocolFeePaid
  ProtocolFeeBurnt
}

enum TradeType {
  ADD_TRACKED_ASSETS
  APPROVE_ASSETS
  CLAIM_REWARDS
  CLAIM_REWARDS_AND_REINVEST
  CLAIM_REWARDS_AND_SWAP
  LEND
  LEND_AND_STAKE
  REDEEM
  REMOVE_TRACKED_ASSETS
  STAKE
  TAKE_ORDER
  UNKNOWN
  UNSTAKE
  UNSTAKE_AND_REDEEM
}

#################################################
# Network
#################################################

type Network @entity {
  id: ID!
  currentRelease: Release
  vaults: Int!
  managers: Int!
  depositors: Int!
  deposits: Int!

  sharesTokenSymbol: String!
  migrationTimelock: Int!
  owner: Bytes!
  nominatedOwner: Bytes

  protocolFeeRate: BigDecimal!
  mlnBurned: BigDecimal!

  releases: [Release!]! @derivedFrom(field: "network")
}

type Release @entity {
  id: ID!
  current: Boolean!
  open: Int!
  close: Int
  isLive: Boolean!

  dustToleranceForAssetsInWeth: BigDecimal
  dustToleranceForExternalPositionsInWeth: BigDecimal

  network: Network!
  vaults: [Vault!] @derivedFrom(field: "release")
}

type NetworkReleaseChanged implements Activity & NetworkActivity @entity {
  id: ID!
  timestamp: Int!
  prevRelease: Release
  nextRelease: Release!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type AssetAdded implements Activity & NetworkActivity @entity {
  id: ID!
  timestamp: Int!
  asset: Asset!
  release: Release!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type AssetRemoved implements Activity & NetworkActivity @entity {
  id: ID!
  timestamp: Int!
  asset: Asset!
  release: Release!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# Vault
#################################################

type Vault @entity {
  id: ID!
  counter: Int!
  name: String!
  comptroller: Comptroller!
  release: Release!
  inception: Int!

  creator: Account!
  owner: Account!
  nominatedOwner: Account
  assetManagers: [Account!]!
  migrator: Account

  freelyTransferableShares: Boolean!
  trackedAssets: [Asset!]!

  depositCount: Int!

  protocolFee: ProtocolFee
  protocolFeeSharesPaid: [ProtocolFeePaid!]! @derivedFrom(field: "vault")
  protocolFeeBurned: [ProtocolFeeBurned!]! @derivedFrom(field: "vault")

  externalPositions: [ExternalPosition!]! @derivedFrom(field: "vault")

  comptrollers: [Comptroller!]! @derivedFrom(field: "vault")
  trades: [Trade!]! @derivedFrom(field: "vault")
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  migrations: [Migration!]! @derivedFrom(field: "vault")
  reconfigurations: [Reconfiguration!]! @derivedFrom(field: "vault")
  sharesChanges: [SharesChange!]! @derivedFrom(field: "vault")

  vaultActivity: [VaultActivity!]! @derivedFrom(field: "vault")
}

type Comptroller @entity {
  id: ID!
  vault: Vault
  creator: Account!
  release: Release!
  status: ComptrollerStatus!
  creation: Int!
  activation: Int!
  destruction: Int
  denomination: Asset!
  authUsers: [Account!]!
  autoProtocolFeeSharesBuyback: Boolean!
  gasRelayer: GasRelayer
  sharesActionTimelock: Int!
  fees: [Fee!]! @derivedFrom(field: "comptroller")
  policies: [Policy!]! @derivedFrom(field: "comptroller")
}

type Migration @entity {
  id: ID!
  vault: Vault!
  comptroller: Comptroller!
  prevRelease: Release!
  nextRelease: Release!
  executableTimestamp: Int!
  executed: Boolean!
  executedTimestamp: Int
  cancelled: Boolean!
  cancelledTimestamp: Int
}

type Reconfiguration @entity {
  id: ID!
  vault: Vault!
  comptroller: Comptroller!
  release: Release!
  executableTimestamp: Int!
  executed: Boolean!
  executedTimestamp: Int
  cancelled: Boolean!
  cancelledTimestamp: Int
}

type VaultCreated implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  creator: Account!
  owner: Account!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultMigrationSignalled implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  migration: Migration!
  nextComptroller: Comptroller!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultMigrationCancelled implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  migration: Migration!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultMigrationExecuted implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  migration: Migration!
  nextComptroller: Comptroller!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultReconfigurationSignalled implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  reconfiguration: Reconfiguration!
  nextComptroller: Comptroller!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultReconfigurationCancelled implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  reconfiguration: Reconfiguration!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultReconfigurationExecuted implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  reconfiguration: Reconfiguration!
  nextComptroller: Comptroller!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultNominatedOwnerSet implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  nominatedOwner: Account!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultNominatedOwnerRemoved implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  nominatedOwner: Account!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type VaultOwnershipTransferred implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  prevOwner: Account!
  nextOwner: Account!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# Account
#################################################

type Account @entity {
  id: ID!

  isOwner: Boolean!
  isAuthUser: Boolean!
  isAssetManager: Boolean!
  isDepositor: Boolean!

  ownerSince: Int!
  authUserSince: Int!
  assetManagerSince: Int!
  depositorSince: Int!

  ownerships: [Vault!]! @derivedFrom(field: "owner")
  ownershipNominations: [Vault!]! @derivedFrom(field: "nominatedOwner")
  authUserships: [Comptroller!]! @derivedFrom(field: "authUsers")
  assetManagements: [Vault!]! @derivedFrom(field: "assetManagers")

  deposits: [Deposit!]! @derivedFrom(field: "depositor")
  sharesChanges: [SharesChange!]! @derivedFrom(field: "depositor")
  depositorActivity: [DepositorActivity!]! @derivedFrom(field: "depositor")
}

#################################################
# Deposit / Shares Changes
#################################################

type Deposit @entity {
  id: ID!
  since: Int!
  vault: Vault!
  depositor: Account!
  shares: BigDecimal!

  sharesChanges: [SharesChange!]! @derivedFrom(field: "deposit")
}

interface SharesChange {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  timestamp: Int!
  shares: BigDecimal!
}

type SharesBoughtEvent implements Activity & VaultActivity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  depositAssetAmount: AssetAmount!
  sharesIssued: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type SharesTransferEvent implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  from: Account!
  to: Account!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type SharesTransferredOutEvent implements Activity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type SharesTransferredInEvent implements Activity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type SharesRedeemedEvent implements Activity & VaultActivity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  payoutAssetAmounts: [AssetAmount!]!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type FeeSharesPaidEvent implements Activity & VaultActivity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  fee: Fee
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type FeeSharesReceivedEvent implements Activity & VaultActivity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  fee: Fee
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type FeeSharesBurnedEvent implements Activity & VaultActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  fee: Fee
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type FeeSharesAllocationChangedEvent implements Activity & VaultActivity & DepositorActivity & SharesChange @entity {
  id: ID!
  vault: Vault!
  sharesChangeType: SharesChangeType!
  fee: Fee
  depositor: Account!
  deposit: Deposit!
  shares: BigDecimal!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# Fees
#################################################

interface Fee {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
}

type EntranceRateBurnFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  rate: BigDecimal!
  lastSettled: Int!
}

type EntranceRateDirectFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  rate: BigDecimal!
  lastSettled: Int!
  recipient: Account
}

type ExitRateBurnFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  inKindRate: BigDecimal!
  specificAssetsRate: BigDecimal!
  lastSettled: Int!
}

type ExitRateDirectFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  inKindRate: BigDecimal!
  specificAssetsRate: BigDecimal!
  lastSettled: Int!
  recipient: Account
}

type ManagementFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  scaledPerSecondRate: BigInt!
  lastSettled: Int!
  activatedForMigratedFundAt: Int!
  recipient: Account
}

type PerformanceFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  settings: String!
  rate: BigDecimal!
  period: Int!
  activatedAt: Int!
  lastPaid: Int!
  highWaterMark: BigDecimal!
  lastSharePrice: BigDecimal!
  aggregateValueDue: BigDecimal!
  sharesOutstanding: BigDecimal!
  recipient: Account
}

type UnknownFee implements Fee @entity {
  id: ID!
  fee: Bytes!
  feeType: FeeType!
  comptroller: Comptroller!
  createdAt: Int!
  lastSettled: Int!
  settings: String!
}

enum FeeType {
  EntranceRateBurn
  EntranceRateDirect
  ExitRateBurn
  ExitRateDirect
  Management
  Performance
  Unknown
}

#################################################
# Policies
#################################################

interface Policy {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
}

type AdapterBlacklistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  adapters: [Bytes!]!
}

type AdapterWhitelistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  adapters: [Bytes!]!
}

type AllowedAdapterIncomingAssetsPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  addressLists: [AddressList!]!
}

type AllowedAdaptersPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  addressLists: [AddressList!]!
}

type AllowedAssetsForRedemptionPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  addressLists: [AddressList!]!
}

type AllowedDepositRecipientsPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  addressLists: [AddressList!]!
}

type AllowedExternalPositionTypesPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  externalPositionTypes: [BigInt!]!
}

type AllowedSharesTransferRecipientsPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  addressLists: [AddressList!]!
}

type AssetBlacklistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  assets: [Bytes!]!
}

type AssetWhitelistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  assets: [Bytes!]!
}

type BuySharesCallerWhitelistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  callers: [Bytes!]!
  updatedAt: Int!
}

type CumulativeSlippageTolerancePolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  tolerance: BigDecimal!
  cumulativeSlippage: BigDecimal!
  lastSlippageTimestamp: Int!
}

type DepositorWhitelistPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  depositors: [Bytes!]!
  updatedAt: Int!
}

type GuaranteedRedemptionPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  startTimestamp: Int!
  duration: Int!
}

type MaxConcentrationPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  maxConcentration: BigDecimal!
}

type MinAssetBalancesPostRedemptionPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  assetBalances: [AssetBalance!]!
  updatedAt: Int!
}

type MinMaxDepositPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
  minDepositAmount: BigDecimal!
  maxDepositAmount: BigDecimal!
  updatedAt: Int!
}

type OnlyRemoveDustExternalPositionPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
}

type OnlyUntrackDustOrPricelessAssetsPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
}

type UnknownPolicy implements Policy @entity {
  id: ID!
  policy: Bytes!
  policyType: PolicyType!
  comptroller: Comptroller!
  createdAt: Int!
  enabled: Boolean!
  settings: String!
}

enum PolicyType {
  AdapterBlacklist
  AdapterWhitelist
  AllowedAdapterIncomingAssets
  AllowedAdapters
  AllowedAssetsForRedemption
  AllowedDepositRecipients
  AllowedExternalPositionTypes
  AllowedSharesTransferRecipients
  AssetBlacklist
  AssetWhitelist
  BuySharesCallerWhitelist
  CumulativeSlippageTolerance
  DepositorWhitelist
  GuaranteedRedemption
  MaxConcentration
  MinAssetBalancesPostRedemption
  MinMaxDeposit
  OnlyRemoveDustExternalPosition
  OnlyUntrackDustOrPricelessAssets
  Unknown
}

#################################################
# Address Lists (for various policies)
#################################################

type AddressList @entity {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  creator: Bytes!
  owner: Bytes!
  updateType: AddressListUpdateType!
  items: [Bytes!]!
}

enum AddressListUpdateType {
  None
  AddOnly
  RemoveOnly
  AddAndRemove
}

#################################################
# Trading
#################################################

type Trade implements Activity & VaultActivity @entity {
  id: ID!
  vault: Vault!
  adapter: Bytes!
  tradeType: TradeType!
  incomingAssets: [Asset!]!
  outgoingAssets: [Asset!]!
  incomingAssetAmounts: [AssetAmount!]!
  outgoingAssetAmounts: [AssetAmount!]!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# External Positions
#################################################

interface ExternalPosition {
  id: ID!
  vault: Vault!
  type: Int!
  active: Boolean!

  changes: [ExternalPositionChange!]! @derivedFrom(field: "externalPosition")
}

interface ExternalPositionChange {
  id: ID!
  externalPosition: ExternalPosition!
}

type CompoundDebtPosition implements ExternalPosition @entity {
  id: ID!
  vault: Vault!
  type: Int!
  active: Boolean!

  collateralAmounts: [AssetAmount!]!
  borrowedAmounts: [AssetAmount!]!

  changes: [ExternalPositionChange!]! @derivedFrom(field: "externalPosition")
}

enum CompoundDebtPositionChangeType {
  AssetBorrowed
  BorrowedAssetRepaid
  CollateralAssetAdded
  CollateralAssetRemoved
}

type CompoundDebtPositionChange implements Activity & VaultActivity & ExternalPositionChange @entity {
  id: ID!
  vault: Vault!
  timestamp: Int!
  externalPosition: ExternalPosition!
  changeType: CompoundDebtPositionChangeType!
  assetAmount: AssetAmount!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# Gas Relayer
#################################################

type GasRelayer @entity {
  id: ID!
  comptroller: Comptroller!
  balance: BigDecimal!

  deposited: [GasRelayerDeposited!]! @derivedFrom(field: "gasRelayer")
  withdrawn: [GasRelayerWithdrawn!]! @derivedFrom(field: "gasRelayer")
  transactions: [GasRelayerTransaction!]! @derivedFrom(field: "gasRelayer")
}

type GasRelayerDeposited @entity {
  id: ID!
  gasRelayer: GasRelayer!
  amount: BigDecimal!
}

type GasRelayerWithdrawn @entity {
  id: ID!
  gasRelayer: GasRelayer!
  amount: BigDecimal!
}

type GasRelayerTransaction @entity {
  id: ID!
  gasRelayer: GasRelayer!
  authorizer: Bytes!
  invokedSelector: String!
  successful: Boolean!
}

#################################################
# Protocol Fees
#################################################

type ProtocolFee @entity {
  id: ID!
  vault: Vault!
  feeTracker: Bytes!
  rate: BigDecimal!
  lastPaid: Int!
}

type ProtocolFeePaid implements Activity & VaultActivity & SharesChange @entity {
  id: ID!
  timestamp: Int!
  vault: Vault!
  shares: BigDecimal!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

type ProtocolFeeBurned implements Activity & VaultActivity & SharesChange @entity {
  id: ID!
  timestamp: Int!
  vault: Vault!
  shares: BigDecimal!
  sharesChangeType: SharesChangeType!
  depositor: Account!
  deposit: Deposit!
  mlnBurned: BigDecimal!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

#################################################
# Assets and prices
#################################################

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!

  # Vault references
  trackingVaults: [Vault!]! @derivedFrom(field: "trackedAssets")
}

# AssetBalance is AssetAmount without currency values
type AssetBalance @entity {
  id: ID!
  asset: Asset!
  amount: BigDecimal!
}

type AssetAmount @entity {
  id: ID!
  asset: Asset!
  amount: BigDecimal!
  denominationAsset: Asset!
  valueDenomination: BigDecimal!
  valueAud: BigDecimal!
  valueBtc: BigDecimal!
  valueChf: BigDecimal!
  valueEth: BigDecimal!
  valueEur: BigDecimal!
  valueGbp: BigDecimal!
  valueJpy: BigDecimal!
  valueUsd: BigDecimal!
  timestamp: Int!
}

type AssetPrice @entity {
  id: ID!
  timestamp: Int!
  asset: Asset!
  price: BigDecimal!
}

type CurrencyPrice @entity {
  id: ID!
  timestamp: Int!
  ethAud: BigDecimal!
  ethBtc: BigDecimal!
  ethChf: BigDecimal!
  ethEur: BigDecimal!
  ethGbp: BigDecimal!
  ethJpy: BigDecimal!
  ethUsd: BigDecimal!
}

#################################################
# Activity interfaces
#################################################

enum ActivityCategory {
  Network
  Vault
  Depositor
}

enum ActivityType {
  Assets
  DepositorShares
  ExternalPosition
  FeeShares
  NetworkSettings
  ProtocolFee
  Trade
  VaultSettings
}

interface Activity {
  id: ID!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

interface NetworkActivity {
  id: ID!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
}

interface VaultActivity {
  id: ID!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
  vault: Vault!
}

interface DepositorActivity {
  id: ID!
  timestamp: Int!
  activityCounter: Int!
  activityCategories: [ActivityCategory!]!
  activityType: ActivityType!
  vault: Vault!
  depositor: Account!
}

#################################################
# Counter
#################################################

type Counter @entity {
  id: ID!
  count: Int!
}
