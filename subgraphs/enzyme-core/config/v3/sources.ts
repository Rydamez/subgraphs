import { Variables } from '../../subgraph.config';

export const sourcesV3 = (variables: Variables) => [
  {
    name: 'FundDeployer',
    version: '3',
    block: variables.block,
    address: variables.release3.fundDeployerAddress,
    events: [
      'ComptrollerLibSet(address)',
      'ComptrollerProxyDeployed(indexed address,address,indexed address,uint256,bytes,bytes,indexed bool)',
      'NewFundCreated(indexed address,address,address,indexed address,string,indexed address,uint256,bytes,bytes)',
      'ReleaseStatusSet(indexed uint8,indexed uint8)',
      'VaultCallDeregistered(indexed address,bytes4)',
      'VaultCallRegistered(indexed address,bytes4)',
    ],
  },
  {
    name: 'FeeManager',
    version: '3',
    block: variables.block,
    address: variables.release3.feeManagerAddress,
    events: [
      'AllSharesOutstandingForcePaidForFund(indexed address,address,uint256)',
      'FeeDeregistered(indexed address,indexed string)',
      'FeeEnabledForFund(indexed address,indexed address,bytes)',
      'FeeRegistered(indexed address,indexed string,uint8[],uint8[],bool,bool)',
      'FeeSettledForFund(indexed address,indexed address,indexed uint8,address,address,uint256)',
      'FeesRecipientSetForFund(indexed address,address,address)',
      'SharesOutstandingPaidForFund(indexed address,indexed address,uint256)',
    ],
  },
  {
    name: 'EntranceRateDirectFee',
    version: '3',
    block: variables.block,
    address: variables.release3.entranceRateDirectFeeAddress,
    events: ['FundSettingsAdded(indexed address,uint256)', 'Settled(indexed address,indexed address,uint256)'],
  },
  {
    name: 'EntranceRateBurnFee',
    version: '3',
    block: variables.block,
    address: variables.release3.entranceRateBurnFeeAddress,
    events: ['FundSettingsAdded(indexed address,uint256)', 'Settled(indexed address,indexed address,uint256)'],
  },
  {
    name: 'ManagementFee',
    version: '3',
    block: variables.block,
    address: variables.release3.managementFeeAddress,
    events: [
      'ActivatedForMigratedFund(indexed address)',
      'FundSettingsAdded(indexed address,uint256)',
      'Settled(indexed address,uint256,uint256)',
    ],
  },
  {
    name: 'PerformanceFee',
    version: '3',
    block: variables.block,
    address: variables.release3.performanceFeeAddress,
    events: [
      'ActivatedForFund(indexed address,uint256)',
      'FundSettingsAdded(indexed address,uint256,uint256)',
      'LastSharePriceUpdated(indexed address,uint256,uint256)',
      'PaidOut(indexed address,uint256,uint256,uint256)',
      'PerformanceUpdated(indexed address,uint256,uint256,int256)',
    ],
  },
  {
    name: 'IntegrationManager',
    version: '3',
    block: variables.block,
    address: variables.release3.integrationManagerAddress,
    events: [
      'AdapterDeregistered(indexed address,indexed string)',
      'AdapterRegistered(indexed address,indexed string)',
      'AuthUserAddedForFund(indexed address,indexed address)',
      'AuthUserRemovedForFund(indexed address,indexed address)',
      'CallOnIntegrationExecutedForFund(indexed address,address,address,indexed address,indexed bytes4,bytes,address[],uint256[],address[],uint256[])',
    ],
  },
  {
    name: 'PolicyManager',
    version: '3',
    block: variables.block,
    address: variables.release3.policyManagerAddress,
    events: [
      'PolicyDeregistered(indexed address,indexed string)',
      'PolicyDisabledForFund(indexed address,indexed address)',
      'PolicyEnabledForFund(indexed address,indexed address,bytes)',
      'PolicyRegistered(indexed address,indexed string,uint8[])',
    ],
  },
  {
    name: 'AdapterBlacklist',
    version: '3',
    block: variables.block,
    address: variables.release3.adapterBlacklistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'AdapterWhitelist',
    version: '3',
    block: variables.block,
    address: variables.release3.adapterWhitelistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'AssetBlacklist',
    version: '3',
    block: variables.block,
    address: variables.release3.assetBlacklistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'AssetWhitelist',
    version: '3',
    block: variables.block,
    address: variables.release3.assetWhitelistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'BuySharesCallerWhitelist',
    version: '3',
    block: variables.block,
    address: variables.release3.buySharesCallerWhitelistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'GuaranteedRedemption',
    version: '3',
    block: variables.block,
    address: variables.release3.guaranteedRedemptionAddress,
    events: [
      'AdapterAdded(address)',
      'AdapterRemoved(address)',
      'FundSettingsSet(indexed address,uint256,uint256)',
      'RedemptionWindowBufferSet(uint256,uint256)',
    ],
  },
  {
    name: 'InvestorWhitelist',
    version: '3',
    block: variables.block,
    address: variables.release3.investorWhitelistAddress,
    events: ['AddressesAdded(indexed address,address[])', 'AddressesRemoved(indexed address,address[])'],
  },
  {
    name: 'MaxConcentration',
    version: '3',
    block: variables.block,
    address: variables.release3.maxConcentrationAddress,
    events: ['MaxConcentrationSet(indexed address,uint256)'],
  },
  {
    name: 'MinMaxInvestment',
    version: '3',
    block: variables.block,
    address: variables.release3.minMaxInvestmentAddress,
    events: ['FundSettingsSet(indexed address,uint256,uint256)'],
  },
  {
    name: 'AggregatedDerivativePriceFeed',
    version: '3',
    block: variables.block,
    address: variables.release3.aggregatedDerivativePriceFeedAddress,
    events: [
      'DerivativeAdded(indexed address,address)',
      'DerivativeRemoved(indexed address)',
      'DerivativeUpdated(indexed address,address,address)',
    ],
  },
  {
    name: 'ChainlinkPriceFeed',
    version: '3',
    block: variables.block,
    address: variables.release3.chainlinkPriceFeedAddress,
    events: [
      'EthUsdAggregatorSet(address,address)',
      'PrimitiveAdded(indexed address,address,uint8,uint256)',
      'PrimitiveRemoved(indexed address)',
      'PrimitiveUpdated(indexed address,address,address)',
    ],
  },
];
